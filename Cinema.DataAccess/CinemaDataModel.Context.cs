//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cinema.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CinemaDatabaseEntities : DbContext
    {
        public CinemaDatabaseEntities()
            : base("name=CinemaDatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<ExternalAccount> ExternalAccounts { get; set; }
        public virtual DbSet<ExternalProvider> ExternalProviders { get; set; }
        public virtual DbSet<GenreLocalization> GenreLocalizations { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<Hall> Halls { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<MovieLocalization> MovieLocalizations { get; set; }
        public virtual DbSet<Movie> Movies { get; set; }
        public virtual DbSet<PersonLocalization> PersonLocalizations { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<Photo> Photos { get; set; }
        public virtual DbSet<Profile> Profiles { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
        public virtual DbSet<Seance> Seances { get; set; }
        public virtual DbSet<SeatType> SeatTypes { get; set; }
        public virtual DbSet<Sector> Sectors { get; set; }
        public virtual DbSet<SectorTypePrice> SectorTypePrices { get; set; }
        public virtual DbSet<SecurityToken> SecurityTokens { get; set; }
        public virtual DbSet<TicketPreOrder> TicketPreOrders { get; set; }
        public virtual DbSet<TicketPreOrdersDeleted> TicketPreOrdersDeleted { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> AverageNumberOfTicketsOnSeance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AverageNumberOfTicketsOnSeance");
        }
    
        public virtual ObjectResult<BookedTicketsOnSeance_Result> BookedTicketsOnSeance(Nullable<int> seanceId)
        {
            var seanceIdParameter = seanceId.HasValue ?
                new ObjectParameter("SeanceId", seanceId) :
                new ObjectParameter("SeanceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BookedTicketsOnSeance_Result>("BookedTicketsOnSeance", seanceIdParameter);
        }
    
        public virtual int BookTicketOnSeance(Nullable<int> seanceId, Nullable<int> row, Nullable<int> place, Nullable<int> profileId)
        {
            var seanceIdParameter = seanceId.HasValue ?
                new ObjectParameter("SeanceId", seanceId) :
                new ObjectParameter("SeanceId", typeof(int));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("Row", row) :
                new ObjectParameter("Row", typeof(int));
    
            var placeParameter = place.HasValue ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(int));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BookTicketOnSeance", seanceIdParameter, rowParameter, placeParameter, profileIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> IsSeanceAvailable(Nullable<int> seanceId)
        {
            var seanceIdParameter = seanceId.HasValue ?
                new ObjectParameter("SeanceId", seanceId) :
                new ObjectParameter("SeanceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("IsSeanceAvailable", seanceIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> IsTicketBooked(Nullable<int> seanceId, Nullable<int> row, Nullable<int> place)
        {
            var seanceIdParameter = seanceId.HasValue ?
                new ObjectParameter("SeanceId", seanceId) :
                new ObjectParameter("SeanceId", typeof(int));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("Row", row) :
                new ObjectParameter("Row", typeof(int));
    
            var placeParameter = place.HasValue ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("IsTicketBooked", seanceIdParameter, rowParameter, placeParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> IsValidPlace(Nullable<int> seanceId, Nullable<int> row, Nullable<int> place)
        {
            var seanceIdParameter = seanceId.HasValue ?
                new ObjectParameter("SeanceId", seanceId) :
                new ObjectParameter("SeanceId", typeof(int));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("Row", row) :
                new ObjectParameter("Row", typeof(int));
    
            var placeParameter = place.HasValue ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("IsValidPlace", seanceIdParameter, rowParameter, placeParameter);
        }
    
        public virtual ObjectResult<string> MoviesThisWeek()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MoviesThisWeek");
        }
    
        public virtual ObjectResult<Nullable<int>> NumberOfSeancesThisWeek()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("NumberOfSeancesThisWeek");
        }
    
        public virtual ObjectResult<SeancesThisWeek_Result> SeancesThisWeek()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeancesThisWeek_Result>("SeancesThisWeek");
        }
    
        public virtual ObjectResult<TopFiveSeances_Result> TopFiveSeances()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TopFiveSeances_Result>("TopFiveSeances");
        }
    }
}
